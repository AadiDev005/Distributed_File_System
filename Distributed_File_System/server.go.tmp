func (efs *EnterpriseFileServer) handleLogin(w http.ResponseWriter, r *http.Request) {
    if r.Method != "POST" {
        http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
        return
    }

    var loginReq struct {
        Username string `json:"username"`
        Password string `json:"password"`
    }

    if err := json.NewDecoder(r.Body).Decode(&loginReq); err != nil {
        http.Error(w, "Invalid JSON", http.StatusBadRequest)
        return
    }

    log.Printf("üîê Login attempt - Received username: %s", loginReq.Username)

    // ‚úÖ FIXED: Map frontend credentials to backend credentials
    var actualUsername, actualPassword string
    
    if loginReq.Username == "admin@datavault.com" && loginReq.Password == "DataVault2025!" {
        // Map frontend display credentials to backend credentials
        actualUsername = "admin"
        actualPassword = "admin123"
        log.Printf("‚úÖ Mapped frontend credentials to backend format")
    } else if loginReq.Username == "admin" {
        // Direct backend credentials
        actualUsername = "admin"
        actualPassword = loginReq.Password
        log.Printf("‚úÖ Using direct backend credentials")
    } else {
        // Other credentials (testuser, etc.)
        actualUsername = loginReq.Username
        actualPassword = loginReq.Password
        log.Printf("‚úÖ Using provided credentials as-is")
    }

    log.Printf("üîç Authenticating with username: %s", actualUsername)

    // ‚úÖ FIXED: Use mapped credentials for authentication
    session, err := efs.authManager.Login(actualUsername, actualPassword)
    if err != nil {
        log.Printf("‚ùå Authentication failed for user %s: %v", actualUsername, err)
        efs.auditLogger.LogEvent(EventUserLogin, "unknown", "", "login", "failure",
            map[string]interface{}{"username": loginReq.Username, "error": err.Error()})
        http.Error(w, "Login failed", http.StatusUnauthorized)
        return
    }

    // Get user details for enhanced response
    user, err := efs.authManager.GetUser(session.UserID)
    if err != nil {
        log.Printf("‚ùå Failed to get user details: %v", err)
        http.Error(w, "Failed to get user details", http.StatusInternalServerError)
        return
    }

    log.Printf("‚úÖ Authentication successful - User: %s, Session: %s", user.Username, session.ID[:8]+"...")

    efs.auditLogger.LogEvent(EventUserLogin, session.UserID, "", "login", "success",
        map[string]interface{}{"username": actualUsername})

    // ‚úÖ ENHANCED: Return session data with user info
    w.Header().Set("Content-Type", "application/json")
    json.NewEncoder(w).Encode(map[string]interface{}{
        "session_id": session.ID,
        "expires_at": session.ExpiresAt.Format(time.RFC3339),
        "user": map[string]interface{}{
            "id":       user.ID,
            "username": user.Username,
            "role":     getRoleString(user.Role),
        },
    })
}

// Helper function to convert UserRole to string (add this if it doesn't exist)
func getRoleString(role UserRole) string {
    switch role {
    case RoleAdmin:
        return "admin"
    case RoleSuperAdmin:
        return "superadmin"
    default:
        return "user"
    }
}
